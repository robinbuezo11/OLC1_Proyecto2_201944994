/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,9],$V2=[1,11],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[5,12,13,23,29,30,31,32,33],$V9=[1,37],$Va=[1,31],$Vb=[1,30],$Vc=[1,29],$Vd=[1,32],$Ve=[1,33],$Vf=[1,34],$Vg=[1,35],$Vh=[1,36],$Vi=[1,38],$Vj=[8,15],$Vk=[1,42],$Vl=[1,43],$Vm=[1,44],$Vn=[1,45],$Vo=[1,46],$Vp=[1,47],$Vq=[1,48],$Vr=[1,49],$Vs=[1,50],$Vt=[1,51],$Vu=[1,52],$Vv=[1,53],$Vw=[1,54],$Vx=[1,55],$Vy=[1,56],$Vz=[8,15,20,51,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],$VA=[8,15,20,51,57,70,71],$VB=[15,20],$VC=[8,15,20,51,57,58,59,64,65,66,67,68,69,70,71],$VD=[8,15,20,51,57,58,59,60,61,63,64,65,66,67,68,69,70,71],$VE=[8,15,20,51,57,64,65,66,67,68,69,70,71],$VF=[1,101],$VG=[1,102],$VH=[1,103],$VI=[1,104],$VJ=[1,105],$VK=[1,106],$VL=[1,107],$VM=[2,13,18,29,30,31,32,33,41,42,46,50,52,53,54,55,56],$VN=[1,151],$VO=[1,150],$VP=[18,50,53],$VQ=[1,177],$VR=[2,13,18,29,30,31,32,33,41,42,43,46,50,52,53,54,55,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INSTRUCTIONSBODY":4,"EOF":5,"BODY":6,"DEC_VAR":7,"semiColon":8,"ASIG_VAR":9,"METHODS":10,"MAIN":11,"Rvoid":12,"id":13,"parLeft":14,"parRight":15,"oBracke":16,"INSTRUCTIONS":17,"cBracke":18,"PARAMS":19,"comma":20,"PARAM":21,"TYPE":22,"Rmain":23,"PARAMS_MET":24,"EXPRESSION":25,"same":26,"inc":27,"dec":28,"Rint":29,"Rdouble":30,"Rchar":31,"Rboolean":32,"Rstring":33,"INSTRUCTION":34,"PRINT":35,"IF":36,"SWITCH":37,"WHILE":38,"FOR":39,"DO_WHILE":40,"Rprint":41,"Rif":42,"Relse":43,"ELSEIF":44,"EIF":45,"Rswitch":46,"CASES":47,"DEFAULT":48,"CASE":49,"Rcase":50,"colon":51,"Rbreak":52,"Rdefault":53,"Rwhile":54,"Rfor":55,"Rdo":56,"tern":57,"sum":58,"sub":59,"mul":60,"div":61,"pow":62,"mod":63,"less":64,"greater":65,"lessEq":66,"greaterEq":67,"equals":68,"diff":69,"and":70,"or":71,"not":72,"double":73,"int":74,"Rtrue":75,"Rfalse":76,"string":77,"char":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"semiColon",12:"Rvoid",13:"id",14:"parLeft",15:"parRight",16:"oBracke",18:"cBracke",20:"comma",23:"Rmain",26:"same",27:"inc",28:"dec",29:"Rint",30:"Rdouble",31:"Rchar",32:"Rboolean",33:"Rstring",41:"Rprint",42:"Rif",43:"Relse",46:"Rswitch",50:"Rcase",51:"colon",52:"Rbreak",53:"Rdefault",54:"Rwhile",55:"Rfor",56:"Rdo",57:"tern",58:"sum",59:"sub",60:"mul",61:"div",62:"pow",63:"mod",64:"less",65:"greater",66:"lessEq",67:"greaterEq",68:"equals",69:"diff",70:"and",71:"or",72:"not",73:"double",74:"int",75:"Rtrue",76:"Rfalse",77:"string",78:"char"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[10,7],[10,8],[19,3],[19,1],[21,2],[11,5],[11,6],[24,3],[24,1],[7,2],[7,4],[9,3],[9,2],[9,2],[22,1],[22,1],[22,1],[22,1],[22,1],[17,2],[17,1],[34,2],[34,2],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[35,5],[36,7],[36,11],[36,8],[36,12],[44,2],[44,1],[45,8],[37,8],[37,7],[37,7],[47,2],[47,1],[49,4],[49,6],[48,3],[38,7],[39,11],[39,11],[40,9],[25,5],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,2],[25,3],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// When input is recognized we return the AST
		return $$[$0-1];
	
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 29: case 30:
this.$=$$[$0-1];
break;
case 6: case 7: case 31: case 32: case 33: case 34: case 35: case 36:
this.$=$$[$0];
break;
case 8:
this.$ = INSTRUCTION.newMethod($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 9:
this.$ = INSTRUCTION.newMethod($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 10: case 15:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 11: case 16: case 28: case 44: case 50:
this.$ = [$$[$0]];
break;
case 12:
this.$ = INSTRUCTION.newDeclaration($$[$0], null, $$[$0-1], this._$.first_line,this._$.first_column+1);
break;
case 13:
this.$ = INSTRUCTION.newMain($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 14:
this.$ = INSTRUCTION.newMain($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 17:
this.$= INSTRUCTION.newDeclaration($$[$0],null, $$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 18:
this.$= INSTRUCTION.newDeclaration($$[$0-2], $$[$0], $$[$0-3],this._$.first_line, this._$.first_column+1);
        
break;
case 19:
this.$ = INSTRUCTION.newAssignment($$[$0-2], $$[$0],this._$.first_line, this._$.first_column+1)
break;
case 20:
this.$ = INSTRUCTION.newIncrement(INSTRUCTION.newValue($$[$0-1],VALUE_TYPE.ID,this._$.first_line, this._$.first_column+1), this._$.first_line, this._$.first_column+1)
break;
case 21:
this.$ = INSTRUCTION.newDecrement(INSTRUCTION.newValue($$[$0-1],VALUE_TYPE.ID,this._$.first_line, this._$.first_column+1), this._$.first_line, this._$.first_column+1)
break;
case 22:
this.$= DATA_TYPE.INT
break;
case 23:
this.$= DATA_TYPE.DOUBLE
break;
case 24:
this.$= DATA_TYPE.CHAR
break;
case 25:
this.$= DATA_TYPE.BOOL
break;
case 26:
this.$= DATA_TYPE.STRING
break;
case 27:
this.$ = $$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 37:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 38:
this.$ = INSTRUCTION.newPrint($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 39:
this.$ = INSTRUCTION.newIf($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 40:
this.$ = INSTRUCTION.newIfElse($$[$0-8], $$[$0-5], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 41:
this.$ = INSTRUCTION.newIfElseIf($$[$0-5], $$[$0-2], $$[$0], null, this._$.first_line,this._$.first_column+1)
break;
case 42:
this.$ = INSTRUCTION.newIfElseIf($$[$0-9], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 43: case 49:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 45:
this.$ = INSTRUCTION.newElseIf($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 46:
this.$ = INSTRUCTION.newSwitch($$[$0-5], $$[$0-2], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 47:
this.$ = INSTRUCTION.newSwitch($$[$0-4], $$[$0-1], null, this._$.first_line,this._$.first_column+1)
break;
case 48:
this.$ = INSTRUCTION.newSwitch($$[$0-4], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 51:
this.$ = INSTRUCTION.newCase($$[$0-2], $$[$0], false, this._$.first_line,this._$.first_column+1)
break;
case 52:
this.$ = INSTRUCTION.newCase($$[$0-4], $$[$0-2], true, this._$.first_line,this._$.first_column+1)
break;
case 53:
this.$ = INSTRUCTION.newDefault($$[$0], this._$.first_line,this._$.first_column+1)
break;
case 54:
this.$ = INSTRUCTION.newWhile($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 55: case 56:
this.$ = INSTRUCTION.newFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 57:
this.$ = INSTRUCTION.newDoWhile($$[$0-6], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 58:
this.$ = INSTRUCTION.newTernary($$[$0-4], $$[$0-2], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 59:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.ADD,this._$.first_line, this._$.first_column+1);
break;
case 60:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.SUB,this._$.first_line, this._$.first_column+1);
break;
case 61:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.MUL,this._$.first_line, this._$.first_column+1);
break;
case 62:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.DIV,this._$.first_line, this._$.first_column+1);
break;
case 63:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.POW,this._$.first_line, this._$.first_column+1);
break;
case 64:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.MOD,this._$.first_line, this._$.first_column+1);
break;
case 65:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.LESS,this._$.first_line, this._$.first_column+1);
break;
case 66:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.GREATER,this._$.first_line, this._$.first_column+1);
break;
case 67:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.LESSEQ,this._$.first_line, this._$.first_column+1);
break;
case 68:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.GREATEREQ,this._$.first_line, this._$.first_column+1);
break;
case 69:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.EQUALS,this._$.first_line, this._$.first_column+1);
break;
case 70:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.DIFF,this._$.first_line, this._$.first_column+1);
break;
case 71:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.AND,this._$.first_line, this._$.first_column+1);
break;
case 72:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.OR,this._$.first_line, this._$.first_column+1);
break;
case 73:
this.$= INSTRUCTION.newBinaryOperation(null,$$[$0], OPERATION_TYPE.NOT,this._$.first_line, this._$.first_column+1);
break;
case 74:
this.$= INSTRUCTION.newUnaryOperation($$[$0], OPERATION_TYPE.UNARY,this._$.first_line, this._$.first_column+1);
break;
case 75:
this.$=$$[$0-1]
break;
case 76:
this.$= INSTRUCTION.newValue(Number($$[$0]),VALUE_TYPE.DOUBLE,this._$.first_line, this._$.first_column+1);
break;
case 77:
this.$= INSTRUCTION.newValue(Number($$[$0]),VALUE_TYPE.INT,this._$.first_line, this._$.first_column+1);
break;
case 78: case 79:
this.$= INSTRUCTION.newValue($$[$0],VALUE_TYPE.BOOL,this._$.first_line, this._$.first_column+1);
break;
case 80:
this.$= INSTRUCTION.newValue($$[$0],VALUE_TYPE.STRING,this._$.first_line, this._$.first_column+1);
break;
case 81:
this.$= INSTRUCTION.newValue($$[$0],VALUE_TYPE.ID,this._$.first_line, this._$.first_column+1);
break;
case 82:
this.$= INSTRUCTION.newValue($$[$0],VALUE_TYPE.CHAR,this._$.first_line, this._$.first_column+1);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:$V0,13:$V1,22:8,23:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7},{1:[3]},{5:[1,17],6:18,7:4,9:5,10:6,11:7,12:$V0,13:$V1,22:8,23:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7},o($V8,[2,3]),{8:[1,19]},{8:[1,20]},o($V8,[2,6]),o($V8,[2,7]),{13:[1,21]},{26:[1,22],27:[1,23],28:[1,24]},{13:[1,25]},{13:[1,26]},{13:[2,22]},{13:[2,23]},{13:[2,24]},{13:[2,25]},{13:[2,26]},{1:[2,1]},o($V8,[2,2]),o($V8,[2,4]),o($V8,[2,5]),{8:[2,17],26:[1,27]},{13:$V9,14:$Va,25:28,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},o($Vj,[2,20]),o($Vj,[2,21]),{14:[1,39]},{14:[1,40]},{13:$V9,14:$Va,25:41,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},o($Vj,[2,19],{57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy}),{13:$V9,14:$Va,25:57,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:58,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:59,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},o($Vz,[2,76]),o($Vz,[2,77]),o($Vz,[2,78]),o($Vz,[2,79]),o($Vz,[2,80]),o($Vz,[2,81]),o($Vz,[2,82]),{15:[1,60],19:61,21:62,22:63,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7},{13:$V9,14:$Va,15:[1,64],24:65,25:66,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{8:[2,18],57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy},{13:$V9,14:$Va,25:67,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:68,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:69,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:70,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:71,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:72,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:73,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:74,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:75,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:76,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:77,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:78,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:79,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:80,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:81,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},o($VA,[2,73],{58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw}),o($Vz,[2,74]),{15:[1,82],57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy},{16:[1,83]},{15:[1,84],20:[1,85]},o($VB,[2,11]),{13:[1,86]},{8:[1,87]},{15:[1,88],20:[1,89]},o($VB,[2,16],{57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy}),{51:[1,90],57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy},o($VC,[2,59],{60:$Vn,61:$Vo,62:$Vp,63:$Vq}),o($VC,[2,60],{60:$Vn,61:$Vo,62:$Vp,63:$Vq}),o($VD,[2,61],{62:$Vp}),o($VD,[2,62],{62:$Vp}),o($VD,[2,63]),o($VD,[2,64],{62:$Vp}),o($VE,[2,65],{58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq}),o($VE,[2,66],{58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq}),o($VE,[2,67],{58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq}),o($VE,[2,68],{58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq}),o($VE,[2,69],{58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq}),o($VE,[2,70],{58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq}),o($VA,[2,71],{58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw}),o([8,15,20,51,57,71],[2,72],{58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx}),o($Vz,[2,75]),{2:$VF,7:93,9:94,13:$V1,17:91,22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:92,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},{16:[1,108]},{21:109,22:63,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7},o($VB,[2,12]),o($V8,[2,13]),{8:[1,110]},{13:$V9,14:$Va,25:111,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:112,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{2:$VF,7:93,9:94,13:$V1,18:[1,113],22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:114,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},o($VM,[2,28]),{8:[1,115]},{8:[1,116]},o($VM,[2,31]),o($VM,[2,32]),o($VM,[2,33]),o($VM,[2,34]),o($VM,[2,35]),o($VM,[2,36]),o($VM,[2,37]),{14:[1,117]},{14:[1,118]},{14:[1,119]},{14:[1,120]},{14:[1,121]},{16:[1,122]},{2:$VF,7:93,9:94,13:$V1,17:123,22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:92,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},o($VB,[2,10]),o($V8,[2,14]),o($VB,[2,15],{57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy}),o([8,15,20,51,57],[2,58],{58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy}),o($V8,[2,8]),o($VM,[2,27]),o($VM,[2,29]),o($VM,[2,30]),{13:$V9,14:$Va,25:124,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:125,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:126,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:127,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{7:128,9:129,13:$V1,22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7},{2:$VF,7:93,9:94,13:$V1,17:130,22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:92,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},{2:$VF,7:93,9:94,13:$V1,18:[1,131],22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:114,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},{15:[1,132],57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy},{15:[1,133],57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy},{15:[1,134],57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy},{15:[1,135],57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy},{8:[1,136]},{8:[1,137]},{2:$VF,7:93,9:94,13:$V1,18:[1,138],22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:114,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},o($V8,[2,9]),{8:[1,139]},{16:[1,140]},{16:[1,141]},{16:[1,142]},{13:$V9,14:$Va,25:143,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{13:$V9,14:$Va,25:144,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{54:[1,145]},o($VM,[2,38]),{2:$VF,7:93,9:94,13:$V1,17:146,22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:92,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},{47:147,48:148,49:149,50:$VN,53:$VO},{2:$VF,7:93,9:94,13:$V1,17:152,22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:92,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},{8:[1,153],57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy},{8:[1,154],57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy},{14:[1,155]},{2:$VF,7:93,9:94,13:$V1,18:[1,156],22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:114,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},{18:[1,158],48:157,49:159,50:$VN,53:$VO},{18:[1,160]},o($VP,[2,50]),{51:[1,161]},{13:$V9,14:$Va,25:162,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{2:$VF,7:93,9:94,13:$V1,18:[1,163],22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:114,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},{9:164,13:$V1},{9:165,13:$V1},{13:$V9,14:$Va,25:166,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},o($VM,[2,39],{44:168,45:169,43:[1,167]}),{18:[1,170]},o($VM,[2,47]),o($VP,[2,49]),o($VM,[2,48]),{2:$VF,7:93,9:94,13:$V1,17:171,22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:92,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},{51:[1,172],57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy},o($VM,[2,54]),{15:[1,173]},{15:[1,174]},{15:[1,175],57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy},{16:[1,176],42:$VQ},o($VM,[2,41],{45:179,43:[1,178]}),o($VR,[2,44]),o($VM,[2,46]),{2:$VF,7:93,9:94,13:$V1,18:[2,53],22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:114,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},{2:$VF,7:93,9:94,13:$V1,17:180,22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:92,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},{16:[1,181]},{16:[1,182]},{8:[1,183]},{2:$VF,7:93,9:94,13:$V1,17:184,22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:92,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},{14:[1,185]},{16:[1,186],42:$VQ},o($VR,[2,43]),o($VP,[2,51],{22:8,7:93,9:94,35:95,36:96,37:97,38:98,39:99,40:100,34:114,2:$VF,13:$V1,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,41:$VG,42:$VH,46:$VI,52:[1,187],54:$VJ,55:$VK,56:$VL}),{2:$VF,7:93,9:94,13:$V1,17:188,22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:92,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},{2:$VF,7:93,9:94,13:$V1,17:189,22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:92,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},o($VM,[2,57]),{2:$VF,7:93,9:94,13:$V1,18:[1,190],22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:114,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},{13:$V9,14:$Va,25:191,59:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{2:$VF,7:93,9:94,13:$V1,17:192,22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:92,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},{8:[1,193]},{2:$VF,7:93,9:94,13:$V1,18:[1,194],22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:114,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},{2:$VF,7:93,9:94,13:$V1,18:[1,195],22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:114,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},o($VM,[2,40]),{15:[1,196],57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy},{2:$VF,7:93,9:94,13:$V1,18:[1,197],22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:114,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},o($VP,[2,52]),o($VM,[2,55]),o($VM,[2,56]),{16:[1,198]},o($VM,[2,42]),{2:$VF,7:93,9:94,13:$V1,17:199,22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:92,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},{2:$VF,7:93,9:94,13:$V1,18:[1,200],22:8,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:114,35:95,36:96,37:97,38:98,39:99,40:100,41:$VG,42:$VH,46:$VI,54:$VJ,55:$VK,56:$VL},o($VR,[2,45])],
defaultActions: {12:[2,22],13:[2,23],14:[2,24],15:[2,25],16:[2,26],17:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const OPERATION_TYPE	= require('./Controllers/Enums/OperationType');
	const VALUE_TYPE 		= require('./Controllers/Enums/ValueType');
	const DATA_TYPE			= require('./Controllers/Enums/DataType');
	const INSTRUCTION		= require('./Controllers/Instruction/Instruction');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// skip whitespaces
break;
case 1:// simple line commentary
break;
case 2:// multi line commentary
break;
case 3:return 29;
break;
case 4:return 30;
break;
case 5:return 32;
break;
case 6:return 31;
break;
case 7:return 33;
break;
case 8:return 27;
break;
case 9:return 28;
break;
case 10:return 58;
break;
case 11:return 59;
break;
case 12:return 60;
break;
case 13:return 61;
break;
case 14:return 62;
break;
case 15:return 63;
break;
case 16:return 57;
break;
case 17:return 68;
break;
case 18:return 69;
break;
case 19:return 66;
break;
case 20:return 64;
break;
case 21:return 67;
break;
case 22:return 65;
break;
case 23:return 51;
break;
case 24:return 70
break;
case 25:return 71;
break;
case 26:return 72;
break;
case 27:return 14;
break;
case 28:return 15;
break;
case 29:return 8;
break;
case 30:return 16;
break;
case 31:return 18;
break;
case 32:return 26;
break;
case 33:return 20;
break;
case 34:return 'oSquare';
break;
case 35:return 'cSquare';
break;
case 36:return 'oDouSquare';
break;
case 37:return 'cDouSquare';
break;
case 38:return 42;
break;
case 39:return 43;
break;
case 40:return 46;
break;
case 41:return 50;
break;
case 42:return 53;
break;
case 43:return 54;
break;
case 44:return 55;
break;
case 45:return 56;
break;
case 46:return 52;
break;
case 47:return 'Rcontinue';
break;
case 48:return 'Rreturn';
break;
case 49:return 12;
break;
case 50:return 41;
break;
case 51:return 75;
break;
case 52:return 76;
break;
case 53:return 23;
break;
case 54:return 'Rnew';
break;
case 55:return 'Radd';
break;
case 56:return 'RtoLower';
break;
case 57:return 'RtoUpper';
break;
case 58:return 'Rlength';
break;
case 59:return 'Rtruncate';
break;
case 60:return 'Rround';
break;
case 61:return 'Rtypeof';
break;
case 62:return 'RtoString';
break;
case 63:return 'RtoCharArray';
break;
case 64:return 13;
break;
case 65: /* yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); */ return 77; 
break;
case 66: /* yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); */ return 78; 
break;
case 67:return 73;
break;
case 68:return 74;
break;
case 69:return 5;
break;
case 70: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\?)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?::)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:=)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\[\[)/i,/^(?:\]\])/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:new\b)/i,/^(?:add\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:["\""][^\"]*["\""])/i,/^(?:["\'"][^\']?["\'"])/i,/^(?:[0-9]+(\.[0-9]+){1}\b)/i,/^(?:[0-9]+\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analyzer;
exports.Parser = analyzer.Parser;
exports.parse = function () { return analyzer.parse.apply(analyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}