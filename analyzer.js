/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,9],$V2=[1,11],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[5,12,13,25,30,31,32,33,34],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[13,15],$Vd=[2,21],$Ve=[1,27],$Vf=[1,38],$Vg=[1,30],$Vh=[1,32],$Vi=[1,31],$Vj=[1,33],$Vk=[1,34],$Vl=[1,35],$Vm=[1,36],$Vn=[1,37],$Vo=[1,39],$Vp=[8,15],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,51],$Vv=[1,52],$Vw=[1,53],$Vx=[1,54],$Vy=[1,55],$Vz=[1,56],$VA=[1,57],$VB=[1,58],$VC=[1,59],$VD=[1,60],$VE=[1,61],$VF=[8,15,21,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],$VG=[1,73],$VH=[15,21],$VI=[8,15,21,52,58,71,72],$VJ=[1,96],$VK=[1,108],$VL=[1,110],$VM=[1,111],$VN=[1,112],$VO=[1,113],$VP=[1,114],$VQ=[1,115],$VR=[1,116],$VS=[8,15,21,52,58,59,60,65,66,67,68,69,70,71,72],$VT=[8,15,21,52,58,59,60,61,62,64,65,66,67,68,69,70,71,72],$VU=[8,15,21,52,58,65,66,67,68,69,70,71,72],$VV=[2,13,18,30,31,32,33,34,42,43,47,51,53,54,55,56,57],$VW=[1,174],$VX=[1,173],$VY=[18,51,54],$VZ=[1,200],$V_=[2,13,18,30,31,32,33,34,42,43,44,47,51,53,54,55,56,57];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INSTRUCTIONSBODY":4,"EOF":5,"BODY":6,"DEC_VAR":7,"semiColon":8,"ASIG_VAR":9,"METHODS":10,"MAIN":11,"Rvoid":12,"id":13,"parLeft":14,"parRight":15,"oBracke":16,"INSTRUCTIONS":17,"cBracke":18,"PARAMS":19,"TYPE":20,"comma":21,"PARAM":22,"CALL":23,"PARAMS_CALL":24,"Rmain":25,"EXPRESSION":26,"same":27,"inc":28,"dec":29,"Rint":30,"Rdouble":31,"Rchar":32,"Rboolean":33,"Rstring":34,"INSTRUCTION":35,"PRINT":36,"IF":37,"SWITCH":38,"WHILE":39,"FOR":40,"DO_WHILE":41,"Rprint":42,"Rif":43,"Relse":44,"ELSEIF":45,"EIF":46,"Rswitch":47,"CASES":48,"DEFAULT":49,"CASE":50,"Rcase":51,"colon":52,"Rbreak":53,"Rdefault":54,"Rwhile":55,"Rfor":56,"Rdo":57,"tern":58,"sum":59,"sub":60,"mul":61,"div":62,"pow":63,"mod":64,"less":65,"greater":66,"lessEq":67,"greaterEq":68,"equals":69,"diff":70,"and":71,"or":72,"not":73,"double":74,"int":75,"Rtrue":76,"Rfalse":77,"string":78,"char":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"semiColon",12:"Rvoid",13:"id",14:"parLeft",15:"parRight",16:"oBracke",18:"cBracke",21:"comma",25:"Rmain",27:"same",28:"inc",29:"dec",30:"Rint",31:"Rdouble",32:"Rchar",33:"Rboolean",34:"Rstring",42:"Rprint",43:"Rif",44:"Relse",47:"Rswitch",51:"Rcase",52:"colon",53:"Rbreak",54:"Rdefault",55:"Rwhile",56:"Rfor",57:"Rdo",58:"tern",59:"sum",60:"sub",61:"mul",62:"div",63:"pow",64:"mod",65:"less",66:"greater",67:"lessEq",68:"greaterEq",69:"equals",70:"diff",71:"and",72:"or",73:"not",74:"double",75:"int",76:"Rtrue",77:"Rfalse",78:"string",79:"char"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[10,7],[10,8],[10,7],[10,8],[19,3],[19,1],[22,2],[23,4],[23,5],[11,5],[11,6],[24,3],[24,1],[7,2],[7,4],[9,3],[9,2],[9,2],[20,1],[20,1],[20,1],[20,1],[20,1],[17,2],[17,1],[35,2],[35,2],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[36,5],[37,7],[37,11],[37,8],[37,12],[45,2],[45,1],[46,8],[38,8],[38,7],[38,7],[48,2],[48,1],[50,4],[50,6],[49,3],[39,7],[40,11],[40,11],[41,9],[26,5],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,4],[26,2],[26,2],[26,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// When input is recognized we return the AST
		return $$[$0-1];
	
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 33: case 34:
this.$=$$[$0-1];
break;
case 6: case 7: case 35: case 36: case 37: case 38: case 39: case 40: case 41:
this.$=$$[$0];
break;
case 8:
this.$ = INSTRUCTION.newMethod($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 9:
this.$ = INSTRUCTION.newMethod($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 10:
this.$ = INSTRUCTION.newFunction($$[$0-6], $$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 11:
this.$ = INSTRUCTION.newFunction($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 12: case 19:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 13: case 20: case 32: case 49: case 55:
this.$ = [$$[$0]];
break;
case 14:
this.$ = INSTRUCTION.newDeclaration($$[$0], null, $$[$0-1], this._$.first_line,this._$.first_column+1);
break;
case 15:
this.$ = INSTRUCTION.newCall($$[$0-3], null, this._$.first_line,this._$.first_column+1);
break;
case 16:
this.$ = INSTRUCTION.newCall($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1);
break;
case 17:
this.$ = INSTRUCTION.newMain($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 18:
this.$ = INSTRUCTION.newMain($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 21:
this.$= INSTRUCTION.newDeclaration($$[$0],null, $$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 22:
this.$= INSTRUCTION.newDeclaration($$[$0-2], $$[$0], $$[$0-3],this._$.first_line, this._$.first_column+1);
        
break;
case 23:
this.$ = INSTRUCTION.newAssignment($$[$0-2], $$[$0],this._$.first_line, this._$.first_column+1)
break;
case 24:
this.$ = INSTRUCTION.newIncrement(INSTRUCTION.newValue($$[$0-1],VALUE_TYPE.ID,this._$.first_line, this._$.first_column+1), this._$.first_line, this._$.first_column+1)
break;
case 25:
this.$ = INSTRUCTION.newDecrement(INSTRUCTION.newValue($$[$0-1],VALUE_TYPE.ID,this._$.first_line, this._$.first_column+1), this._$.first_line, this._$.first_column+1)
break;
case 26:
this.$= DATA_TYPE.INT
break;
case 27:
this.$= DATA_TYPE.DOUBLE
break;
case 28:
this.$= DATA_TYPE.CHAR
break;
case 29:
this.$= DATA_TYPE.BOOL
break;
case 30:
this.$= DATA_TYPE.STRING
break;
case 31:
this.$ = $$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 42:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 43:
this.$ = INSTRUCTION.newPrint($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 44:
this.$ = INSTRUCTION.newIf($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 45:
this.$ = INSTRUCTION.newIfElse($$[$0-8], $$[$0-5], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 46:
this.$ = INSTRUCTION.newIfElseIf($$[$0-5], $$[$0-2], $$[$0], null, this._$.first_line,this._$.first_column+1)
break;
case 47:
this.$ = INSTRUCTION.newIfElseIf($$[$0-9], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 48: case 54:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 50:
this.$ = INSTRUCTION.newElseIf($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 51:
this.$ = INSTRUCTION.newSwitch($$[$0-5], $$[$0-2], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 52:
this.$ = INSTRUCTION.newSwitch($$[$0-4], $$[$0-1], null, this._$.first_line,this._$.first_column+1)
break;
case 53:
this.$ = INSTRUCTION.newSwitch($$[$0-4], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 56:
this.$ = INSTRUCTION.newCase($$[$0-2], $$[$0], false, this._$.first_line,this._$.first_column+1)
break;
case 57:
this.$ = INSTRUCTION.newCase($$[$0-4], $$[$0-2], true, this._$.first_line,this._$.first_column+1)
break;
case 58:
this.$ = INSTRUCTION.newDefault($$[$0], this._$.first_line,this._$.first_column+1)
break;
case 59:
this.$ = INSTRUCTION.newWhile($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 60: case 61:
this.$ = INSTRUCTION.newFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 62:
this.$ = INSTRUCTION.newDoWhile($$[$0-6], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 63:
this.$ = INSTRUCTION.newTernary($$[$0-4], $$[$0-2], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 64:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.ADD,this._$.first_line, this._$.first_column+1);
break;
case 65:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.SUB,this._$.first_line, this._$.first_column+1);
break;
case 66:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.MUL,this._$.first_line, this._$.first_column+1);
break;
case 67:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.DIV,this._$.first_line, this._$.first_column+1);
break;
case 68:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.POW,this._$.first_line, this._$.first_column+1);
break;
case 69:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.MOD,this._$.first_line, this._$.first_column+1);
break;
case 70:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.LESS,this._$.first_line, this._$.first_column+1);
break;
case 71:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.GREATER,this._$.first_line, this._$.first_column+1);
break;
case 72:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.LESSEQ,this._$.first_line, this._$.first_column+1);
break;
case 73:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.GREATEREQ,this._$.first_line, this._$.first_column+1);
break;
case 74:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.EQUALS,this._$.first_line, this._$.first_column+1);
break;
case 75:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.DIFF,this._$.first_line, this._$.first_column+1);
break;
case 76:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.AND,this._$.first_line, this._$.first_column+1);
break;
case 77:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.OR,this._$.first_line, this._$.first_column+1);
break;
case 78:
this.$ = INSTRUCTION.newCast($$[$0-2], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 79:
this.$= INSTRUCTION.newBinaryOperation(null,$$[$0], OPERATION_TYPE.NOT,this._$.first_line, this._$.first_column+1);
break;
case 80:
this.$= INSTRUCTION.newUnaryOperation($$[$0], OPERATION_TYPE.UNARY,this._$.first_line, this._$.first_column+1);
break;
case 81:
this.$=$$[$0-1]
break;
case 82:
this.$= INSTRUCTION.newValue(Number($$[$0]),VALUE_TYPE.DOUBLE,this._$.first_line, this._$.first_column+1);
break;
case 83:
this.$= INSTRUCTION.newValue(Number($$[$0]),VALUE_TYPE.INT,this._$.first_line, this._$.first_column+1);
break;
case 84: case 85:
this.$= INSTRUCTION.newValue($$[$0],VALUE_TYPE.BOOL,this._$.first_line, this._$.first_column+1);
break;
case 86:
this.$= INSTRUCTION.newValue($$[$0],VALUE_TYPE.STRING,this._$.first_line, this._$.first_column+1);
break;
case 87:
this.$= INSTRUCTION.newValue($$[$0],VALUE_TYPE.ID,this._$.first_line, this._$.first_column+1);
break;
case 88:
this.$= INSTRUCTION.newValue($$[$0],VALUE_TYPE.CHAR,this._$.first_line, this._$.first_column+1);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:$V0,13:$V1,20:8,25:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7},{1:[3]},{5:[1,17],6:18,7:4,9:5,10:6,11:7,12:$V0,13:$V1,20:8,25:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7},o($V8,[2,3]),{8:[1,19]},{8:[1,20]},o($V8,[2,6]),o($V8,[2,7]),{13:[1,21]},{27:$V9,28:$Va,29:$Vb},{13:[1,25]},{13:[1,26]},o($Vc,[2,26]),o($Vc,[2,27]),o($Vc,[2,28]),o($Vc,[2,29]),o($Vc,[2,30]),{1:[2,1]},o($V8,[2,2]),o($V8,[2,4]),o($V8,[2,5]),{8:$Vd,14:[1,28],27:$Ve},{13:$Vf,14:$Vg,26:29,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},o($Vp,[2,24]),o($Vp,[2,25]),{14:[1,40]},{14:[1,41]},{13:$Vf,14:$Vg,26:42,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{15:[1,43],19:44,20:46,22:45,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7},o($Vp,[2,23],{58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE}),{13:$Vf,14:$Vg,20:62,26:63,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:64,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:65,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},o($VF,[2,82]),o($VF,[2,83]),o($VF,[2,84]),o($VF,[2,85]),o($VF,[2,86]),o($VF,[2,87]),o($VF,[2,88]),{15:[1,66],19:67,20:46,22:45,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7},{13:$Vf,14:$Vg,15:[1,68],24:69,26:70,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{8:[2,22],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE},{16:[1,71]},{15:[1,72],21:$VG},o($VH,[2,13]),{13:[1,74]},{13:$Vf,14:$Vg,26:75,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:76,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:77,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:78,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:79,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:80,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:81,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:82,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:83,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:84,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:85,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:86,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:87,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:88,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:89,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{15:[1,90]},{15:[1,91],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE},o($VI,[2,79],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC}),o($VF,[2,80]),{16:[1,92]},{15:[1,93],21:$VG},{8:[1,94]},{15:[1,95],21:$VJ},o($VH,[2,20],{58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE}),{2:$VK,7:99,9:100,13:$VL,17:97,20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:98,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},{16:[1,117]},{20:46,22:118,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7},o($VH,[2,14]),{52:[1,119],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE},o($VS,[2,64],{61:$Vt,62:$Vu,63:$Vv,64:$Vw}),o($VS,[2,65],{61:$Vt,62:$Vu,63:$Vv,64:$Vw}),o($VT,[2,66],{63:$Vv}),o($VT,[2,67],{63:$Vv}),o($VT,[2,68]),o($VT,[2,69],{63:$Vv}),o($VU,[2,70],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw}),o($VU,[2,71],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw}),o($VU,[2,72],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw}),o($VU,[2,73],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw}),o($VU,[2,74],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw}),o($VU,[2,75],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw}),o($VI,[2,76],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC}),o([8,15,21,52,58,72],[2,77],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),{13:$Vf,14:$Vg,26:120,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},o($VF,[2,81]),{2:$VK,7:99,9:100,13:$VL,17:121,20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:98,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},{16:[1,122]},o($V8,[2,17]),{8:[1,123]},{13:$Vf,14:$Vg,26:124,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{2:$VK,7:99,9:100,13:$VL,18:[1,125],20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:126,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},o($VV,[2,32]),{8:[1,127]},{8:[1,128]},o($VV,[2,35]),o($VV,[2,36]),o($VV,[2,37]),o($VV,[2,38]),o($VV,[2,39]),o($VV,[2,40]),o($VV,[2,41]),o($VV,[2,42]),{13:[1,129]},{14:[1,130],27:$V9,28:$Va,29:$Vb},{14:[1,131]},{14:[1,132]},{14:[1,133]},{14:[1,134]},{14:[1,135]},{16:[1,136]},{2:$VK,7:99,9:100,13:$VL,17:137,20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:98,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},o($VH,[2,12]),{13:$Vf,14:$Vg,26:138,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},o([8,15,21,52],[2,78],{58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE}),{2:$VK,7:99,9:100,13:$VL,18:[1,139],20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:126,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},{2:$VK,7:99,9:100,13:$VL,17:140,20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:98,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},o($V8,[2,18]),o($VH,[2,19],{58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE}),o($V8,[2,10]),o($VV,[2,31]),o($VV,[2,33]),o($VV,[2,34]),{8:$Vd,27:$Ve},{13:$Vf,14:$Vg,15:[1,141],24:142,26:70,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:143,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:144,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:145,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:146,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{7:147,9:148,13:$V1,20:109,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7},{2:$VK,7:99,9:100,13:$VL,17:149,20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:98,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},{2:$VK,7:99,9:100,13:$VL,18:[1,150],20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:126,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},o([8,15,21,52,58],[2,63],{59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE}),o($V8,[2,8]),{2:$VK,7:99,9:100,13:$VL,18:[1,151],20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:126,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},{8:[1,152]},{15:[1,153],21:$VJ},{15:[1,154],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE},{15:[1,155],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE},{15:[1,156],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE},{15:[1,157],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE},{8:[1,158]},{8:[1,159]},{2:$VK,7:99,9:100,13:$VL,18:[1,160],20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:126,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},o($V8,[2,11]),o($V8,[2,9]),o($VV,[2,15]),{8:[1,161]},{8:[1,162]},{16:[1,163]},{16:[1,164]},{16:[1,165]},{13:$Vf,14:$Vg,26:166,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{13:$Vf,14:$Vg,26:167,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{55:[1,168]},o($VV,[2,16]),o($VV,[2,43]),{2:$VK,7:99,9:100,13:$VL,17:169,20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:98,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},{48:170,49:171,50:172,51:$VW,54:$VX},{2:$VK,7:99,9:100,13:$VL,17:175,20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:98,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},{8:[1,176],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE},{8:[1,177],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE},{14:[1,178]},{2:$VK,7:99,9:100,13:$VL,18:[1,179],20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:126,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},{18:[1,181],49:180,50:182,51:$VW,54:$VX},{18:[1,183]},o($VY,[2,55]),{52:[1,184]},{13:$Vf,14:$Vg,26:185,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{2:$VK,7:99,9:100,13:$VL,18:[1,186],20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:126,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},{9:187,13:$V1},{9:188,13:$V1},{13:$Vf,14:$Vg,26:189,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},o($VV,[2,44],{45:191,46:192,44:[1,190]}),{18:[1,193]},o($VV,[2,52]),o($VY,[2,54]),o($VV,[2,53]),{2:$VK,7:99,9:100,13:$VL,17:194,20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:98,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},{52:[1,195],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE},o($VV,[2,59]),{15:[1,196]},{15:[1,197]},{15:[1,198],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE},{16:[1,199],43:$VZ},o($VV,[2,46],{46:202,44:[1,201]}),o($V_,[2,49]),o($VV,[2,51]),{2:$VK,7:99,9:100,13:$VL,18:[2,58],20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:126,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},{2:$VK,7:99,9:100,13:$VL,17:203,20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:98,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},{16:[1,204]},{16:[1,205]},{8:[1,206]},{2:$VK,7:99,9:100,13:$VL,17:207,20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:98,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},{14:[1,208]},{16:[1,209],43:$VZ},o($V_,[2,48]),o($VY,[2,56],{7:99,9:100,36:101,37:102,38:103,39:104,40:105,41:106,23:107,20:109,35:126,2:$VK,13:$VL,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,42:$VM,43:$VN,47:$VO,53:[1,210],55:$VP,56:$VQ,57:$VR}),{2:$VK,7:99,9:100,13:$VL,17:211,20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:98,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},{2:$VK,7:99,9:100,13:$VL,17:212,20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:98,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},o($VV,[2,62]),{2:$VK,7:99,9:100,13:$VL,18:[1,213],20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:126,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},{13:$Vf,14:$Vg,26:214,60:$Vh,73:$Vi,74:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{2:$VK,7:99,9:100,13:$VL,17:215,20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:98,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},{8:[1,216]},{2:$VK,7:99,9:100,13:$VL,18:[1,217],20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:126,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},{2:$VK,7:99,9:100,13:$VL,18:[1,218],20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:126,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},o($VV,[2,45]),{15:[1,219],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE},{2:$VK,7:99,9:100,13:$VL,18:[1,220],20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:126,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},o($VY,[2,57]),o($VV,[2,60]),o($VV,[2,61]),{16:[1,221]},o($VV,[2,47]),{2:$VK,7:99,9:100,13:$VL,17:222,20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:98,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},{2:$VK,7:99,9:100,13:$VL,18:[1,223],20:109,23:107,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:126,36:101,37:102,38:103,39:104,40:105,41:106,42:$VM,43:$VN,47:$VO,55:$VP,56:$VQ,57:$VR},o($V_,[2,50])],
defaultActions: {17:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const OPERATION_TYPE	= require('./Controllers/Enums/OperationType');
	const VALUE_TYPE 		= require('./Controllers/Enums/ValueType');
	const DATA_TYPE			= require('./Controllers/Enums/DataType');
	const INSTRUCTION		= require('./Controllers/Instruction/Instruction');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// skip whitespaces
break;
case 1:// simple line commentary
break;
case 2:// multi line commentary
break;
case 3:return 30;
break;
case 4:return 31;
break;
case 5:return 33;
break;
case 6:return 32;
break;
case 7:return 34;
break;
case 8:return 28;
break;
case 9:return 29;
break;
case 10:return 59;
break;
case 11:return 60;
break;
case 12:return 61;
break;
case 13:return 62;
break;
case 14:return 63;
break;
case 15:return 64;
break;
case 16:return 58;
break;
case 17:return 69;
break;
case 18:return 70;
break;
case 19:return 67;
break;
case 20:return 65;
break;
case 21:return 68;
break;
case 22:return 66;
break;
case 23:return 52;
break;
case 24:return 71
break;
case 25:return 72;
break;
case 26:return 73;
break;
case 27:return 14;
break;
case 28:return 15;
break;
case 29:return 8;
break;
case 30:return 16;
break;
case 31:return 18;
break;
case 32:return 27;
break;
case 33:return 21;
break;
case 34:return 'oSquare';
break;
case 35:return 'cSquare';
break;
case 36:return 'oDouSquare';
break;
case 37:return 'cDouSquare';
break;
case 38:return 43;
break;
case 39:return 44;
break;
case 40:return 47;
break;
case 41:return 51;
break;
case 42:return 54;
break;
case 43:return 55;
break;
case 44:return 56;
break;
case 45:return 57;
break;
case 46:return 53;
break;
case 47:return 'Rcontinue';
break;
case 48:return 'Rreturn';
break;
case 49:return 12;
break;
case 50:return 42;
break;
case 51:return 76;
break;
case 52:return 77;
break;
case 53:return 25;
break;
case 54:return 'Rnew';
break;
case 55:return 'Radd';
break;
case 56:return 'RtoLower';
break;
case 57:return 'RtoUpper';
break;
case 58:return 'Rlength';
break;
case 59:return 'Rtruncate';
break;
case 60:return 'Rround';
break;
case 61:return 'Rtypeof';
break;
case 62:return 'RtoString';
break;
case 63:return 'RtoCharArray';
break;
case 64:return 13;
break;
case 65: /* yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); */ return 78; 
break;
case 66: /* yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); */ return 79; 
break;
case 67:return 74;
break;
case 68:return 75;
break;
case 69:return 5;
break;
case 70: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\?)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?::)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:=)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\[\[)/i,/^(?:\]\])/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:new\b)/i,/^(?:add\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[\"][^"\\]*(\\.[^"\\]*)*[\"])/i,/^(?:["\'"][^\']?["\'"])/i,/^(?:[0-9]+(\.[0-9]+){1}\b)/i,/^(?:[0-9]+\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analyzer;
exports.Parser = analyzer.Parser;
exports.parse = function () { return analyzer.parse.apply(analyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}