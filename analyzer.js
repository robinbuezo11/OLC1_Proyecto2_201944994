/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,11],$V2=[1,13],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,14],$V9=[5,14,15,27,32,33,34,35,36,67],$Va=[1,25],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,29],$Vf=[1,30],$Vg=[1,31],$Vh=[15,17,63,69],$Vi=[2,23],$Vj=[1,35],$Vk=[1,46],$Vl=[1,42],$Vm=[1,44],$Vn=[1,39],$Vo=[1,40],$Vp=[1,41],$Vq=[1,43],$Vr=[1,47],$Vs=[1,48],$Vt=[1,49],$Vu=[1,50],$Vv=[1,51],$Vw=[1,52],$Vx=[8,17],$Vy=[1,72],$Vz=[1,73],$VA=[1,65],$VB=[1,66],$VC=[1,67],$VD=[1,68],$VE=[1,69],$VF=[1,70],$VG=[1,71],$VH=[1,74],$VI=[1,75],$VJ=[1,76],$VK=[1,77],$VL=[1,78],$VM=[1,79],$VN=[8,17,20,23,57,64,68,69,73,74,75,76,77,78,79,80,81,82,83,84,85,86],$VO=[1,89],$VP=[1,101],$VQ=[17,23],$VR=[8,17,20,23,57,64,73,74,85,86],$VS=[1,135],$VT=[1,153],$VU=[1,155],$VV=[1,150],$VW=[1,151],$VX=[1,156],$VY=[1,157],$VZ=[1,158],$V_=[1,159],$V$=[1,160],$V01=[1,161],$V11=[1,162],$V21=[8,17,20,23,57,64,68,69,73,74,75,76,81,82,83,84,85,86],$V31=[8,17,20,23,57,64,68,69,73,74,75,76,77,78,80,81,82,83,84,85,86],$V41=[8,17,20,23,57,64,68,69,73,74,81,82,83,84,85,86],$V51=[2,15,20,32,33,34,35,36,44,45,47,48,52,56,58,59,60,61,62,67],$V61=[1,190],$V71=[1,217],$V81=[20,23],$V91=[2,5,14,15,20,27,32,33,34,35,36,44,45,47,48,52,56,58,59,60,61,62,67],$Va1=[1,251],$Vb1=[1,250],$Vc1=[20,56,58],$Vd1=[1,280],$Ve1=[2,15,20,32,33,34,35,36,44,45,47,48,49,52,56,58,59,60,61,62,67];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INSTRUCTIONSBODY":4,"EOF":5,"BODY":6,"DEC_VAR":7,"semiColon":8,"ASIG_VAR":9,"METHODS":10,"MAIN":11,"DEC_STRUCT":12,"SET_STRUCT":13,"Rvoid":14,"id":15,"parLeft":16,"parRight":17,"oBracke":18,"INSTRUCTIONS":19,"cBracke":20,"PARAMS":21,"TYPE":22,"comma":23,"PARAM":24,"CALL":25,"PARAMS_CALL":26,"Rmain":27,"EXPRESSION":28,"same":29,"inc":30,"dec":31,"Rint":32,"Rdouble":33,"Rchar":34,"Rboolean":35,"Rstring":36,"INSTRUCTION":37,"PRINT":38,"IF":39,"SWITCH":40,"WHILE":41,"FOR":42,"DO_WHILE":43,"Rbreak":44,"Rcontinue":45,"RETURN":46,"Rprint":47,"Rif":48,"Relse":49,"ELSEIF":50,"EIF":51,"Rswitch":52,"CASES":53,"DEFAULT":54,"CASE":55,"Rcase":56,"colon":57,"Rdefault":58,"Rwhile":59,"Rfor":60,"Rdo":61,"Rreturn":62,"oSquare":63,"cSquare":64,"Rnew":65,"LIST_VALUES":66,"Rlist":67,"less":68,"greater":69,"dot":70,"Radd":71,"oDouSquare":72,"cDouSquare":73,"tern":74,"sum":75,"sub":76,"mul":77,"div":78,"pow":79,"mod":80,"lessEq":81,"greaterEq":82,"equals":83,"diff":84,"and":85,"or":86,"RtoLower":87,"RtoUpper":88,"Rlength":89,"not":90,"double":91,"int":92,"Rtrue":93,"Rfalse":94,"string":95,"char":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"semiColon",14:"Rvoid",15:"id",16:"parLeft",17:"parRight",18:"oBracke",20:"cBracke",23:"comma",27:"Rmain",29:"same",30:"inc",31:"dec",32:"Rint",33:"Rdouble",34:"Rchar",35:"Rboolean",36:"Rstring",44:"Rbreak",45:"Rcontinue",47:"Rprint",48:"Rif",49:"Relse",52:"Rswitch",56:"Rcase",57:"colon",58:"Rdefault",59:"Rwhile",60:"Rfor",61:"Rdo",62:"Rreturn",63:"oSquare",64:"cSquare",65:"Rnew",67:"Rlist",68:"less",69:"greater",70:"dot",71:"Radd",72:"oDouSquare",73:"cDouSquare",74:"tern",75:"sum",76:"sub",77:"mul",78:"div",79:"pow",80:"mod",81:"lessEq",82:"greaterEq",83:"equals",84:"diff",85:"and",86:"or",87:"RtoLower",88:"RtoUpper",89:"Rlength",90:"not",91:"double",92:"int",93:"Rtrue",94:"Rfalse",95:"string",96:"char"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[10,7],[10,8],[10,7],[10,8],[21,3],[21,1],[24,2],[25,3],[25,4],[11,5],[11,6],[26,3],[26,1],[7,2],[7,4],[9,3],[9,2],[9,2],[22,1],[22,1],[22,1],[22,1],[22,1],[19,2],[19,1],[37,2],[37,2],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,2],[37,2],[37,2],[37,1],[37,1],[38,5],[39,7],[39,11],[39,8],[39,12],[50,2],[50,1],[51,8],[40,8],[40,7],[40,7],[53,2],[53,1],[55,4],[54,3],[41,7],[42,11],[42,11],[43,9],[46,3],[46,2],[12,11],[12,9],[12,12],[66,3],[66,1],[13,7],[13,7],[13,7],[28,5],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,4],[28,4],[28,4],[28,4],[28,2],[28,2],[28,3],[28,1],[28,4],[28,4],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// When input is recognized we return the AST
		return $$[$0-1];
	
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 35: case 36: case 45:
this.$=$$[$0-1];
break;
case 6: case 7: case 8: case 9: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 48:
this.$=$$[$0];
break;
case 10:
this.$ = INSTRUCTION.newMethod($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 11:
this.$ = INSTRUCTION.newMethod($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 12:
this.$ = INSTRUCTION.newFunction($$[$0-6], $$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 13:
this.$ = INSTRUCTION.newFunction($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 14: case 21: case 74:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 15: case 22: case 34: case 56: case 62: case 75:
this.$ = [$$[$0]];
break;
case 16:
this.$ = INSTRUCTION.newDeclaration($$[$0], null, $$[$0-1], this._$.first_line,this._$.first_column+1);
break;
case 17:
this.$ = INSTRUCTION.newCall($$[$0-2], null, this._$.first_line,this._$.first_column+1);
break;
case 18:
this.$ = INSTRUCTION.newCall($$[$0-3], $$[$0-1], this._$.first_line,this._$.first_column+1);
break;
case 19:
this.$ = INSTRUCTION.newMain($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 20:
this.$ = INSTRUCTION.newMain($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 23:
this.$= INSTRUCTION.newDeclaration($$[$0],null, $$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 24:
this.$= INSTRUCTION.newDeclaration($$[$0-2], $$[$0], $$[$0-3],this._$.first_line, this._$.first_column+1);
break;
case 25:
this.$ = INSTRUCTION.newAssignment($$[$0-2], $$[$0],this._$.first_line, this._$.first_column+1)
break;
case 26:
this.$ = INSTRUCTION.newIncrement(INSTRUCTION.newValue($$[$0-1],VALUE_TYPE.ID,this._$.first_line, this._$.first_column+1), this._$.first_line, this._$.first_column+1)
break;
case 27:
this.$ = INSTRUCTION.newDecrement(INSTRUCTION.newValue($$[$0-1],VALUE_TYPE.ID,this._$.first_line, this._$.first_column+1), this._$.first_line, this._$.first_column+1)
break;
case 28:
this.$= DATA_TYPE.INT
break;
case 29:
this.$= DATA_TYPE.DOUBLE
break;
case 30:
this.$= DATA_TYPE.CHAR
break;
case 31:
this.$= DATA_TYPE.BOOL
break;
case 32:
this.$= DATA_TYPE.STRING
break;
case 33:
this.$ = $$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 46:
this.$= INSTRUCTION.newBreak(this._$.first_line,this._$.first_column+1);
break;
case 47:
this.$= INSTRUCTION.newContinue(this._$.first_line,this._$.first_column+1);
break;
case 49:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 50:
this.$ = INSTRUCTION.newPrint($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 51:
this.$ = INSTRUCTION.newIf($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 52:
this.$ = INSTRUCTION.newIfElse($$[$0-8], $$[$0-5], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 53:
this.$ = INSTRUCTION.newIfElseIf($$[$0-5], $$[$0-2], $$[$0], null, this._$.first_line,this._$.first_column+1)
break;
case 54:
this.$ = INSTRUCTION.newIfElseIf($$[$0-9], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 55: case 61:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 57:
this.$ = INSTRUCTION.newElseIf($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 58:
this.$ = INSTRUCTION.newSwitch($$[$0-5], $$[$0-2], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 59:
this.$ = INSTRUCTION.newSwitch($$[$0-4], $$[$0-1], null, this._$.first_line,this._$.first_column+1)
break;
case 60:
this.$ = INSTRUCTION.newSwitch($$[$0-4], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 63:
this.$ = INSTRUCTION.newCase($$[$0-2], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 64:
this.$ = INSTRUCTION.newDefault($$[$0], this._$.first_line,this._$.first_column+1)
break;
case 65:
this.$ = INSTRUCTION.newWhile($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 66: case 67:
this.$ = INSTRUCTION.newFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 68:
this.$ = INSTRUCTION.newDoWhile($$[$0-6], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 69:
this.$ = INSTRUCTION.newReturn($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 70:
this.$ = INSTRUCTION.newReturn(null, this._$.first_line,this._$.first_column+1)
break;
case 71:
this.$ = INSTRUCTION.newVectorNull($$[$0-10], $$[$0-7], $$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 72:
this.$ = INSTRUCTION.newVectorValues($$[$0-8], $$[$0-5], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 73:
this.$ = INSTRUCTION.newList($$[$0-9], $$[$0-7], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 76:
this.$ = INSTRUCTION.newSetVector($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 77:
this.$ = INSTRUCTION.newAddList($$[$0-6], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 78:
this.$ = INSTRUCTION.newSetList($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 79:
this.$= INSTRUCTION.newTernary($$[$0-4], $$[$0-2], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 80:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.ADD,this._$.first_line, this._$.first_column+1);
break;
case 81:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.SUB,this._$.first_line, this._$.first_column+1);
break;
case 82:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.MUL,this._$.first_line, this._$.first_column+1);
break;
case 83:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.DIV,this._$.first_line, this._$.first_column+1);
break;
case 84:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.POW,this._$.first_line, this._$.first_column+1);
break;
case 85:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.MOD,this._$.first_line, this._$.first_column+1);
break;
case 86:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.LESS,this._$.first_line, this._$.first_column+1);
break;
case 87:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.GREATER,this._$.first_line, this._$.first_column+1);
break;
case 88:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.LESSEQ,this._$.first_line, this._$.first_column+1);
break;
case 89:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.GREATEREQ,this._$.first_line, this._$.first_column+1);
break;
case 90:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.EQUALS,this._$.first_line, this._$.first_column+1);
break;
case 91:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.DIFF,this._$.first_line, this._$.first_column+1);
break;
case 92:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.AND,this._$.first_line, this._$.first_column+1);
break;
case 93:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.OR,this._$.first_line, this._$.first_column+1);
break;
case 94:
this.$= INSTRUCTION.newUnaryOperation($$[$0-1], OPERATION_TYPE.TO_LOWER,this._$.first_line, this._$.first_column+1);
break;
case 95:
this.$= INSTRUCTION.newUnaryOperation($$[$0-1], OPERATION_TYPE.TO_UPPER,this._$.first_line, this._$.first_column+1);
break;
case 96:
this.$= INSTRUCTION.newUnaryOperation($$[$0-1], OPERATION_TYPE.LENGTH,this._$.first_line, this._$.first_column+1);
break;
case 97:
this.$= INSTRUCTION.newCast($$[$0-2], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 98:
this.$= INSTRUCTION.newBinaryOperation(null,$$[$0], OPERATION_TYPE.NOT,this._$.first_line, this._$.first_column+1);
break;
case 99:
this.$= INSTRUCTION.newUnaryOperation($$[$0], OPERATION_TYPE.UNARY,this._$.first_line, this._$.first_column+1);
break;
case 100:
this.$=$$[$0-1]
break;
case 101:
this.$=$$[$0]
break;
case 102:
this.$= INSTRUCTION.newVectorAccess($$[$0-3],$$[$0-1],this._$.first_line, this._$.first_column+1);
break;
case 103:
this.$= INSTRUCTION.newListAccess($$[$0-3],$$[$0-1],this._$.first_line, this._$.first_column+1);
break;
case 104:
this.$= INSTRUCTION.newValue(Number($$[$0]),VALUE_TYPE.DOUBLE,this._$.first_line, this._$.first_column+1);
break;
case 105:
this.$= INSTRUCTION.newValue(Number($$[$0]),VALUE_TYPE.INT,this._$.first_line, this._$.first_column+1);
break;
case 106: case 107:
this.$= INSTRUCTION.newValue($$[$0],VALUE_TYPE.BOOL,this._$.first_line, this._$.first_column+1);
break;
case 108:
this.$= INSTRUCTION.newValue($$[$0],VALUE_TYPE.STRING,this._$.first_line, this._$.first_column+1);
break;
case 109:
this.$= INSTRUCTION.newValue($$[$0],VALUE_TYPE.ID,this._$.first_line, this._$.first_column+1);
break;
case 110:
this.$= INSTRUCTION.newValue($$[$0],VALUE_TYPE.CHAR,this._$.first_line, this._$.first_column+1);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V0,15:$V1,22:10,27:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,67:$V8},{1:[3]},{5:[1,20],6:21,7:4,9:5,10:6,11:7,12:8,13:9,14:$V0,15:$V1,22:10,27:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,67:$V8},o($V9,[2,3]),{8:[1,22]},{8:[1,23]},o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),{15:[1,24],63:$Va},{29:$Vb,30:$Vc,31:$Vd,63:$Ve,70:$Vf,72:$Vg},{15:[1,32]},{15:[1,33]},{68:[1,34]},o($Vh,[2,28]),o($Vh,[2,29]),o($Vh,[2,30]),o($Vh,[2,31]),o($Vh,[2,32]),{1:[2,1]},o($V9,[2,2]),o($V9,[2,4]),o($V9,[2,5]),{8:$Vi,16:[1,36],29:$Vj},{64:[1,37]},{15:$Vk,16:$Vl,25:45,28:38,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},o($Vx,[2,26]),o($Vx,[2,27]),{15:$Vk,16:$Vl,25:45,28:53,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{71:[1,54]},{15:$Vk,16:$Vl,25:45,28:55,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{16:[1,56]},{16:[1,57]},{22:58,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},{15:$Vk,16:$Vl,25:45,28:59,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:[1,60],21:61,22:63,24:62,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},{15:[1,64]},o($Vx,[2,25],{68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM}),{16:[1,80]},{16:[1,81]},{16:[1,82]},{15:$Vk,16:$Vl,22:83,25:45,28:84,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:85,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:86,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},o($VN,[2,101]),o($VN,[2,109],{16:$VO,63:[1,87],72:[1,88]}),o($VN,[2,104]),o($VN,[2,105]),o($VN,[2,106]),o($VN,[2,107]),o($VN,[2,108]),o($VN,[2,110]),{64:[1,90],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},{16:[1,91]},{68:$Vy,69:$Vz,73:[1,92],74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},{17:[1,93],21:94,22:63,24:62,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},{15:$Vk,16:$Vl,17:[1,95],25:45,26:96,28:97,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{69:[1,98]},{8:[2,24],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},{18:[1,99]},{17:[1,100],23:$VP},o($VQ,[2,15]),{15:[1,102]},{29:[1,103]},{15:$Vk,16:$Vl,25:45,28:104,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:105,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:106,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:107,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:108,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:109,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:110,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:111,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:112,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:113,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:114,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:115,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:116,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:117,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:118,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:119,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:120,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:121,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:[1,122]},{17:[1,123],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},o($VR,[2,98],{68:$Vy,69:$Vz,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK}),o($VN,[2,99]),{15:$Vk,16:$Vl,25:45,28:124,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:125,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,17:[1,126],25:45,26:127,28:97,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{29:[1,128]},{15:$Vk,16:$Vl,25:45,28:129,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{29:[1,130]},{18:[1,131]},{17:[1,132],23:$VP},{8:[1,133]},{17:[1,134],23:$VS},o($VQ,[2,22],{68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM}),{15:[1,136]},{2:$VT,7:139,9:140,12:141,13:142,15:$VU,19:137,22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:138,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},{18:[1,163]},{22:63,24:164,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},o($VQ,[2,16]),{18:[1,166],65:[1,165]},{57:[1,167],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},o($V21,[2,80],{77:$VD,78:$VE,79:$VF,80:$VG}),o($V21,[2,81],{77:$VD,78:$VE,79:$VF,80:$VG}),o($V31,[2,82],{79:$VF}),o($V31,[2,83],{79:$VF}),o($V31,[2,84]),o($V31,[2,85],{79:$VF}),o($V41,[2,86],{75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG}),o($V41,[2,87],{75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG}),o($V41,[2,88],{75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG}),o($V41,[2,89],{75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG}),o($V41,[2,90],{75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG}),o($V41,[2,91],{75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG}),o($VR,[2,92],{68:$Vy,69:$Vz,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK}),o([8,17,20,23,57,64,73,74,86],[2,93],{68:$Vy,69:$Vz,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL}),{17:[1,168],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},{17:[1,169],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},{17:[1,170],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},{15:$Vk,16:$Vl,25:45,28:171,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},o($VN,[2,100]),{64:[1,172],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},{68:$Vy,69:$Vz,73:[1,173],74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},o($VN,[2,17]),{17:[1,174],23:$VS},{15:$Vk,16:$Vl,25:45,28:175,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{17:[1,176],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},{15:$Vk,16:$Vl,25:45,28:177,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{2:$VT,7:139,9:140,12:141,13:142,15:$VU,19:178,22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:138,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},{18:[1,179]},o($V9,[2,19]),{8:[1,180]},{15:$Vk,16:$Vl,25:45,28:181,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{29:[1,182]},{2:$VT,7:139,9:140,12:141,13:142,15:$VU,20:[1,183],22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:184,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},o($V51,[2,34]),{8:[1,185]},{8:[1,186]},o($V51,[2,37]),o($V51,[2,38]),o($V51,[2,39]),o($V51,[2,40]),o($V51,[2,41]),o($V51,[2,42]),o($V51,[2,43]),o($V51,[2,44]),{8:[1,187]},{8:[1,188]},{8:[1,189]},o($V51,[2,48]),o($V51,[2,49]),{15:$V61,63:$Va},{16:$VO,29:$Vb,30:$Vc,31:$Vd,63:$Ve,70:$Vf,72:$Vg},{16:[1,191]},{16:[1,192]},{16:[1,193]},{16:[1,194]},{16:[1,195]},{18:[1,196]},{8:[1,198],15:$Vk,16:$Vl,25:45,28:197,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{2:$VT,7:139,9:140,12:141,13:142,15:$VU,19:199,22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:138,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},o($VQ,[2,14]),{22:200,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},{15:$Vk,16:$Vl,25:45,28:202,66:201,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:203,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},o($VN,[2,94]),o($VN,[2,95]),o($VN,[2,96]),o([8,17,20,23,57,64,73],[2,97],{68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM}),o($VN,[2,102]),o($VN,[2,103]),o($VN,[2,18]),{8:[1,204],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},{8:[1,205]},{8:[1,206],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},{2:$VT,7:139,9:140,12:141,13:142,15:$VU,20:[1,207],22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:184,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},{2:$VT,7:139,9:140,12:141,13:142,15:$VU,19:208,22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:138,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},o($V9,[2,20]),o($VQ,[2,21],{68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM}),{65:[1,209]},o($V9,[2,12]),o($V51,[2,33]),o($V51,[2,35]),o($V51,[2,36]),o($V51,[2,45]),o($V51,[2,46]),o($V51,[2,47]),{8:$Vi,29:$Vj},{15:$Vk,16:$Vl,25:45,28:210,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:211,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:212,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:213,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{7:214,9:215,15:$V71,22:216,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},{2:$VT,7:139,9:140,12:141,13:142,15:$VU,19:218,22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:138,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},{8:[1,219],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},o($V51,[2,70]),{2:$VT,7:139,9:140,12:141,13:142,15:$VU,20:[1,220],22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:184,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},{63:[1,221]},{20:[1,222],23:[1,223]},o($V81,[2,75],{68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM}),o([8,17,20,23,57,64,73,74],[2,79],{68:$Vy,69:$Vz,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM}),o($V91,[2,76]),o($V91,[2,77]),o($V91,[2,78]),o($V9,[2,10]),{2:$VT,7:139,9:140,12:141,13:142,15:$VU,20:[1,224],22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:184,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},{67:[1,225]},{17:[1,226],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},{17:[1,227],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},{17:[1,228],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},{17:[1,229],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},{8:[1,230]},{8:[1,231]},{15:$V61},{29:$Vb,30:$Vc,31:$Vd},{2:$VT,7:139,9:140,12:141,13:142,15:$VU,20:[1,232],22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:184,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},o($V51,[2,69]),o($V9,[2,13]),{15:$Vk,16:$Vl,25:45,28:233,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{8:[1,234]},{15:$Vk,16:$Vl,25:45,28:235,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},o($V9,[2,11]),{68:[1,236]},{8:[1,237]},{18:[1,238]},{18:[1,239]},{18:[1,240]},{15:$Vk,16:$Vl,25:45,28:241,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{15:$Vk,16:$Vl,25:45,28:242,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{59:[1,243]},{64:[1,244],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},o($V91,[2,72]),o($V81,[2,74],{68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM}),{22:245,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},o($V51,[2,50]),{2:$VT,7:139,9:140,12:141,13:142,15:$VU,19:246,22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:138,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},{53:247,54:248,55:249,56:$Va1,58:$Vb1},{2:$VT,7:139,9:140,12:141,13:142,15:$VU,19:252,22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:138,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},{8:[1,253],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},{8:[1,254],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},{16:[1,255]},{8:[1,256]},{69:[1,257]},{2:$VT,7:139,9:140,12:141,13:142,15:$VU,20:[1,258],22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:184,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},{20:[1,260],54:259,55:261,56:$Va1,58:$Vb1},{20:[1,262]},o($Vc1,[2,62]),{57:[1,263]},{15:$Vk,16:$Vl,25:45,28:264,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{2:$VT,7:139,9:140,12:141,13:142,15:$VU,20:[1,265],22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:184,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},{9:266,15:$V71},{9:267,15:$V71},{15:$Vk,16:$Vl,25:45,28:268,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},o($V91,[2,71]),{8:[1,269]},o($V51,[2,51],{50:271,51:272,49:[1,270]}),{20:[1,273]},o($V51,[2,59]),o($Vc1,[2,61]),o($V51,[2,60]),{2:$VT,7:139,9:140,12:141,13:142,15:$VU,19:274,22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:138,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},{57:[1,275],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},o($V51,[2,65]),{17:[1,276]},{17:[1,277]},{17:[1,278],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},o($V91,[2,73]),{18:[1,279],48:$Vd1},o($V51,[2,53],{51:282,49:[1,281]}),o($Ve1,[2,56]),o($V51,[2,58]),{2:$VT,7:139,9:140,12:141,13:142,15:$VU,20:[2,64],22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:184,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},{2:$VT,7:139,9:140,12:141,13:142,15:$VU,19:283,22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:138,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},{18:[1,284]},{18:[1,285]},{8:[1,286]},{2:$VT,7:139,9:140,12:141,13:142,15:$VU,19:287,22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:138,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},{16:[1,288]},{18:[1,289],48:$Vd1},o($Ve1,[2,55]),o($Vc1,[2,63],{7:139,9:140,12:141,13:142,38:143,39:144,40:145,41:146,42:147,43:148,25:149,46:152,22:154,37:184,2:$VT,15:$VU,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,44:$VV,45:$VW,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8}),{2:$VT,7:139,9:140,12:141,13:142,15:$VU,19:290,22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:138,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},{2:$VT,7:139,9:140,12:141,13:142,15:$VU,19:291,22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:138,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},o($V51,[2,68]),{2:$VT,7:139,9:140,12:141,13:142,15:$VU,20:[1,292],22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:184,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},{15:$Vk,16:$Vl,25:45,28:293,76:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw},{2:$VT,7:139,9:140,12:141,13:142,15:$VU,19:294,22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:138,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},{2:$VT,7:139,9:140,12:141,13:142,15:$VU,20:[1,295],22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:184,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},{2:$VT,7:139,9:140,12:141,13:142,15:$VU,20:[1,296],22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:184,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},o($V51,[2,52]),{17:[1,297],68:$Vy,69:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM},{2:$VT,7:139,9:140,12:141,13:142,15:$VU,20:[1,298],22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:184,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},o($V51,[2,66]),o($V51,[2,67]),{18:[1,299]},o($V51,[2,54]),{2:$VT,7:139,9:140,12:141,13:142,15:$VU,19:300,22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:138,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},{2:$VT,7:139,9:140,12:141,13:142,15:$VU,20:[1,301],22:154,25:149,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:184,38:143,39:144,40:145,41:146,42:147,43:148,44:$VV,45:$VW,46:152,47:$VX,48:$VY,52:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,67:$V8},o($Ve1,[2,57])],
defaultActions: {20:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const OPERATION_TYPE	= require('./Controllers/Enums/OperationType');
	const VALUE_TYPE 		= require('./Controllers/Enums/ValueType');
	const DATA_TYPE			= require('./Controllers/Enums/DataType');
	const INSTRUCTION		= require('./Controllers/Instruction/Instruction');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// skip whitespaces
break;
case 1:// simple line commentary
break;
case 2:// multi line commentary
break;
case 3:return 32;
break;
case 4:return 33;
break;
case 5:return 35;
break;
case 6:return 34;
break;
case 7:return 36;
break;
case 8:return 30;
break;
case 9:return 31;
break;
case 10:return 75;
break;
case 11:return 76;
break;
case 12:return 77;
break;
case 13:return 78;
break;
case 14:return 79;
break;
case 15:return 80;
break;
case 16:return 74;
break;
case 17:return 83;
break;
case 18:return 84;
break;
case 19:return 81;
break;
case 20:return 68;
break;
case 21:return 82;
break;
case 22:return 69;
break;
case 23:return 57;
break;
case 24:return 85
break;
case 25:return 86;
break;
case 26:return 90;
break;
case 27:return 16;
break;
case 28:return 17;
break;
case 29:return 8;
break;
case 30:return 18;
break;
case 31:return 20;
break;
case 32:return 29;
break;
case 33:return 23;
break;
case 34:return 70;
break;
case 35:return 72;
break;
case 36:return 73;
break;
case 37:return 63;
break;
case 38:return 64;
break;
case 39:return 48;
break;
case 40:return 49;
break;
case 41:return 52;
break;
case 42:return 56;
break;
case 43:return 58;
break;
case 44:return 59;
break;
case 45:return 60;
break;
case 46:return 61;
break;
case 47:return 44;
break;
case 48:return 45;
break;
case 49:return 62;
break;
case 50:return 14;
break;
case 51:return 47;
break;
case 52:return 93;
break;
case 53:return 94;
break;
case 54:return 27;
break;
case 55:return 67;
break;
case 56:return 65;
break;
case 57:return 71;
break;
case 58:return 87;
break;
case 59:return 88;
break;
case 60:return 89;
break;
case 61:return 'Rtruncate';
break;
case 62:return 'Rround';
break;
case 63:return 'Rtypeof';
break;
case 64:return 'RtoString';
break;
case 65:return 'RtoCharArray';
break;
case 66:return 15;
break;
case 67: /* yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); */ return 95; 
break;
case 68: /* yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); */ return 96; 
break;
case 69:return 91;
break;
case 70:return 92;
break;
case 71:return 5;
break;
case 72: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\?)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?::)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:=)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\[\[)/i,/^(?:\]\])/i,/^(?:\[)/i,/^(?:\])/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:list\b)/i,/^(?:new\b)/i,/^(?:add\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[\"][^"\\]*(\\.[^"\\]*)*[\"])/i,/^(?:["\'"][^\']?["\'"])/i,/^(?:[0-9]+(\.[0-9]+){1}\b)/i,/^(?:[0-9]+\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analyzer;
exports.Parser = analyzer.Parser;
exports.parse = function () { return analyzer.parse.apply(analyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}