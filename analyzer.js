/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,9],$V2=[1,11],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[5,12,13,23,27,28,29,30,31],$V9=[1,35],$Va=[1,29],$Vb=[1,28],$Vc=[1,27],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,36],$Vj=[1,40],$Vk=[1,41],$Vl=[1,42],$Vm=[1,43],$Vn=[1,44],$Vo=[1,45],$Vp=[1,46],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,51],$Vv=[1,52],$Vw=[1,53],$Vx=[8,15,20,40,41,42,43,44,45,46,47,48,49,50,51,52,53],$Vy=[8,15,20,52,53],$Vz=[15,20],$VA=[8,15,20,40,41,46,47,48,49,50,51,52,53],$VB=[8,15,20,40,41,42,43,45,46,47,48,49,50,51,52,53],$VC=[8,15,20,46,47,48,49,50,51,52,53],$VD=[1,92],$VE=[1,93],$VF=[1,94],$VG=[2,13,18,27,28,29,30,31,35,36],$VH=[1,119],$VI=[2,13,18,27,28,29,30,31,35,36,37];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INSTRUCTIONSBODY":4,"EOF":5,"BODY":6,"DEC_VAR":7,"semiColon":8,"ASIG_VAR":9,"METHODS":10,"MAIN":11,"Rvoid":12,"id":13,"parLeft":14,"parRight":15,"oBracke":16,"INSTRUCTIONS":17,"cBracke":18,"PARAMS":19,"comma":20,"PARAM":21,"TYPE":22,"Rmain":23,"PARAMS_MET":24,"EXPRESSION":25,"same":26,"Rint":27,"Rdouble":28,"Rchar":29,"Rboolean":30,"Rstring":31,"INSTRUCTION":32,"PRINT":33,"IF":34,"Rprint":35,"Rif":36,"Relse":37,"ELSEIF":38,"EIF":39,"sum":40,"sub":41,"mul":42,"div":43,"pow":44,"mod":45,"less":46,"greater":47,"lessEq":48,"greaterEq":49,"equals":50,"diff":51,"and":52,"or":53,"not":54,"double":55,"int":56,"Rtrue":57,"Rfalse":58,"string":59,"char":60,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"semiColon",12:"Rvoid",13:"id",14:"parLeft",15:"parRight",16:"oBracke",18:"cBracke",20:"comma",23:"Rmain",26:"same",27:"Rint",28:"Rdouble",29:"Rchar",30:"Rboolean",31:"Rstring",35:"Rprint",36:"Rif",37:"Relse",40:"sum",41:"sub",42:"mul",43:"div",44:"pow",45:"mod",46:"less",47:"greater",48:"lessEq",49:"greaterEq",50:"equals",51:"diff",52:"and",53:"or",54:"not",55:"double",56:"int",57:"Rtrue",58:"Rfalse",59:"string",60:"char"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[10,7],[10,8],[19,3],[19,1],[21,2],[11,5],[11,6],[24,3],[24,1],[7,2],[7,4],[9,3],[22,1],[22,1],[22,1],[22,1],[22,1],[17,2],[17,1],[32,2],[32,2],[32,1],[32,1],[32,1],[33,5],[34,7],[34,11],[34,8],[34,12],[38,2],[38,1],[39,8],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,2],[25,3],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// When input is recognized we return the AST
		return $$[$0-1];
	
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 27: case 28:
this.$=$$[$0-1];
break;
case 6: case 7: case 29: case 30:
this.$=$$[$0];
break;
case 8:
this.$ = INSTRUCTION.newMethod($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 9:
this.$ = INSTRUCTION.newMethod($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 10: case 15:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 11: case 16: case 26: case 38:
this.$ = [$$[$0]];
break;
case 12:
this.$ = INSTRUCTION.newDeclaration($$[$0], null, $$[$0-1], this._$.first_line,this._$.first_column+1);
break;
case 13:
this.$ = INSTRUCTION.newMain($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 14:
this.$ = INSTRUCTION.newMain($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 17:
this.$= INSTRUCTION.newDeclaration($$[$0],null, $$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 18:
this.$= INSTRUCTION.newDeclaration($$[$0-2], $$[$0], $$[$0-3],this._$.first_line, this._$.first_column+1);
        
break;
case 19:
this.$ = INSTRUCTION.newAssignment($$[$0-2], $$[$0],this._$.first_line, this._$.first_column+1)
break;
case 20:
this.$= DATA_TYPE.INT
break;
case 21:
this.$= DATA_TYPE.DOUBLE
break;
case 22:
this.$= DATA_TYPE.CHAR
break;
case 23:
this.$= DATA_TYPE.BOOL
break;
case 24:
this.$= DATA_TYPE.STRING
break;
case 25:
this.$ = $$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 31:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 32:
this.$ = INSTRUCTION.newPrint($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 33:
this.$ = INSTRUCTION.newIf($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 34:
this.$ = INSTRUCTION.newIfElse($$[$0-8], $$[$0-5], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 35:
this.$ = INSTRUCTION.newIfElseIf($$[$0-5], $$[$0-2], $$[$0], null, this._$.first_line,this._$.first_column+1)
break;
case 36:
this.$ = INSTRUCTION.newIfElseIf($$[$0-9], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 37:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 39:
this.$ = new INSTRUCTION.newElseIf($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 40:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.ADD,this._$.first_line, this._$.first_column+1);
break;
case 41:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.SUB,this._$.first_line, this._$.first_column+1);
break;
case 42:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.MUL,this._$.first_line, this._$.first_column+1);
break;
case 43:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.DIV,this._$.first_line, this._$.first_column+1);
break;
case 44:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.POW,this._$.first_line, this._$.first_column+1);
break;
case 45:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.MOD,this._$.first_line, this._$.first_column+1);
break;
case 46:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.LESS,this._$.first_line, this._$.first_column+1);
break;
case 47:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.GREATER,this._$.first_line, this._$.first_column+1);
break;
case 48:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.LESSEQ,this._$.first_line, this._$.first_column+1);
break;
case 49:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.GREATEREQ,this._$.first_line, this._$.first_column+1);
break;
case 50:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.EQUALS,this._$.first_line, this._$.first_column+1);
break;
case 51:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.DIFF,this._$.first_line, this._$.first_column+1);
break;
case 52:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.AND,this._$.first_line, this._$.first_column+1);
break;
case 53:
this.$= INSTRUCTION.newBinaryOperation($$[$0-2],$$[$0], OPERATION_TYPE.OR,this._$.first_line, this._$.first_column+1);
break;
case 54:
this.$= INSTRUCTION.newBinaryOperation(null,$$[$0], OPERATION_TYPE.NOT,this._$.first_line, this._$.first_column+1);
break;
case 55:
this.$= INSTRUCTION.newUnaryOperation($$[$0], OPERATION_TYPE.UNARY,this._$.first_line, this._$.first_column+1);
break;
case 56:
this.$=$$[$0-1]
break;
case 57:
this.$= INSTRUCTION.newValue(Number($$[$0]),VALUE_TYPE.DOUBLE,this._$.first_line, this._$.first_column+1);
break;
case 58:
this.$= INSTRUCTION.newValue(Number($$[$0]),VALUE_TYPE.INT,this._$.first_line, this._$.first_column+1);
break;
case 59: case 60:
this.$= INSTRUCTION.newValue($$[$0],VALUE_TYPE.BOOL,this._$.first_line, this._$.first_column+1);
break;
case 61:
this.$= INSTRUCTION.newValue($$[$0],VALUE_TYPE.STRING,this._$.first_line, this._$.first_column+1);
break;
case 62:
this.$= INSTRUCTION.newValue($$[$0],VALUE_TYPE.ID,this._$.first_line, this._$.first_column+1);
break;
case 63:
this.$= INSTRUCTION.newValue($$[$0],VALUE_TYPE.CHAR,this._$.first_line, this._$.first_column+1);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:$V0,13:$V1,22:8,23:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7},{1:[3]},{5:[1,17],6:18,7:4,9:5,10:6,11:7,12:$V0,13:$V1,22:8,23:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7},o($V8,[2,3]),{8:[1,19]},{8:[1,20]},o($V8,[2,6]),o($V8,[2,7]),{13:[1,21]},{26:[1,22]},{13:[1,23]},{13:[1,24]},{13:[2,20]},{13:[2,21]},{13:[2,22]},{13:[2,23]},{13:[2,24]},{1:[2,1]},o($V8,[2,2]),o($V8,[2,4]),o($V8,[2,5]),{8:[2,17],26:[1,25]},{13:$V9,14:$Va,25:26,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{14:[1,37]},{14:[1,38]},{13:$V9,14:$Va,25:39,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:[2,19],40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw},{13:$V9,14:$Va,25:54,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{13:$V9,14:$Va,25:55,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{13:$V9,14:$Va,25:56,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},o($Vx,[2,57]),o($Vx,[2,58]),o($Vx,[2,59]),o($Vx,[2,60]),o($Vx,[2,61]),o($Vx,[2,62]),o($Vx,[2,63]),{15:[1,57],19:58,21:59,22:60,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7},{13:$V9,14:$Va,15:[1,61],24:62,25:63,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:[2,18],40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw},{13:$V9,14:$Va,25:64,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{13:$V9,14:$Va,25:65,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{13:$V9,14:$Va,25:66,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{13:$V9,14:$Va,25:67,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{13:$V9,14:$Va,25:68,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{13:$V9,14:$Va,25:69,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{13:$V9,14:$Va,25:70,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{13:$V9,14:$Va,25:71,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{13:$V9,14:$Va,25:72,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{13:$V9,14:$Va,25:73,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{13:$V9,14:$Va,25:74,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{13:$V9,14:$Va,25:75,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{13:$V9,14:$Va,25:76,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{13:$V9,14:$Va,25:77,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},o($Vy,[2,54],{40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu}),o($Vx,[2,55]),{15:[1,78],40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw},{16:[1,79]},{15:[1,80],20:[1,81]},o($Vz,[2,11]),{13:[1,82]},{8:[1,83]},{15:[1,84],20:[1,85]},o($Vz,[2,16],{40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw}),o($VA,[2,40],{42:$Vl,43:$Vm,44:$Vn,45:$Vo}),o($VA,[2,41],{42:$Vl,43:$Vm,44:$Vn,45:$Vo}),o($VB,[2,42],{44:$Vn}),o($VB,[2,43],{44:$Vn}),o($VB,[2,44]),o($VB,[2,45],{44:$Vn}),o($VC,[2,46],{40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo}),o($VC,[2,47],{40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo}),o($VC,[2,48],{40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo}),o($VC,[2,49],{40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo}),o($VC,[2,50],{40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo}),o($VC,[2,51],{40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo}),o($Vy,[2,52],{40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu}),o([8,15,20,53],[2,53],{40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv}),o($Vx,[2,56]),{2:$VD,7:88,9:89,13:$V1,17:86,22:8,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:87,33:90,34:91,35:$VE,36:$VF},{16:[1,95]},{21:96,22:60,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7},o($Vz,[2,12]),o($V8,[2,13]),{8:[1,97]},{13:$V9,14:$Va,25:98,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{2:$VD,7:88,9:89,13:$V1,18:[1,99],22:8,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:100,33:90,34:91,35:$VE,36:$VF},o($VG,[2,26]),{8:[1,101]},{8:[1,102]},o($VG,[2,29]),o($VG,[2,30]),o($VG,[2,31]),{14:[1,103]},{14:[1,104]},{2:$VD,7:88,9:89,13:$V1,17:105,22:8,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:87,33:90,34:91,35:$VE,36:$VF},o($Vz,[2,10]),o($V8,[2,14]),o($Vz,[2,15],{40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw}),o($V8,[2,8]),o($VG,[2,25]),o($VG,[2,27]),o($VG,[2,28]),{13:$V9,14:$Va,25:106,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{13:$V9,14:$Va,25:107,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{2:$VD,7:88,9:89,13:$V1,18:[1,108],22:8,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:100,33:90,34:91,35:$VE,36:$VF},{15:[1,109],40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw},{15:[1,110],40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw},o($V8,[2,9]),{8:[1,111]},{16:[1,112]},o($VG,[2,32]),{2:$VD,7:88,9:89,13:$V1,17:113,22:8,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:87,33:90,34:91,35:$VE,36:$VF},{2:$VD,7:88,9:89,13:$V1,18:[1,114],22:8,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:100,33:90,34:91,35:$VE,36:$VF},o($VG,[2,33],{38:116,39:117,37:[1,115]}),{16:[1,118],36:$VH},o($VG,[2,35],{39:121,37:[1,120]}),o($VI,[2,38]),{2:$VD,7:88,9:89,13:$V1,17:122,22:8,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:87,33:90,34:91,35:$VE,36:$VF},{14:[1,123]},{16:[1,124],36:$VH},o($VI,[2,37]),{2:$VD,7:88,9:89,13:$V1,18:[1,125],22:8,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:100,33:90,34:91,35:$VE,36:$VF},{13:$V9,14:$Va,25:126,41:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{2:$VD,7:88,9:89,13:$V1,17:127,22:8,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:87,33:90,34:91,35:$VE,36:$VF},o($VG,[2,34]),{15:[1,128],40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw},{2:$VD,7:88,9:89,13:$V1,18:[1,129],22:8,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:100,33:90,34:91,35:$VE,36:$VF},{16:[1,130]},o($VG,[2,36]),{2:$VD,7:88,9:89,13:$V1,17:131,22:8,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:87,33:90,34:91,35:$VE,36:$VF},{2:$VD,7:88,9:89,13:$V1,18:[1,132],22:8,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:100,33:90,34:91,35:$VE,36:$VF},o($VI,[2,39])],
defaultActions: {12:[2,20],13:[2,21],14:[2,22],15:[2,23],16:[2,24],17:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const OPERATION_TYPE	= require('./Controllers/Enums/OperationType');
	const VALUE_TYPE 		= require('./Controllers/Enums/ValueType');
	const DATA_TYPE			= require('./Controllers/Enums/DataType');
	const INSTRUCTION		= require('./Controllers/Instruction/Instruction');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// skip whitespaces
break;
case 1:// simple line commentary
break;
case 2:// multi line commentary
break;
case 3:return 27;
break;
case 4:return 28;
break;
case 5:return 30;
break;
case 6:return 29;
break;
case 7:return 31;
break;
case 8:return 40;
break;
case 9:return 41;
break;
case 10:return 42;
break;
case 11:return 43;
break;
case 12:return 44;
break;
case 13:return 45;
break;
case 14:return 50;
break;
case 15:return 51;
break;
case 16:return 48;
break;
case 17:return 46;
break;
case 18:return 49;
break;
case 19:return 47;
break;
case 20:return 'colon';
break;
case 21:return 52
break;
case 22:return 53;
break;
case 23:return 54;
break;
case 24:return 14;
break;
case 25:return 15;
break;
case 26:return 8;
break;
case 27:return 16;
break;
case 28:return 18;
break;
case 29:return 26;
break;
case 30:return 'doubleSum';
break;
case 31:return 'doubleSub'
break;
case 32:return 20;
break;
case 33:return 'oSquare';
break;
case 34:return 'cSquare';
break;
case 35:return 'oDouSquare';
break;
case 36:return 'cDouSquare';
break;
case 37:return 36;
break;
case 38:return 37;
break;
case 39:return 'Rswitch';
break;
case 40:return 'Rcase';
break;
case 41:return 'Rdefault';
break;
case 42:return 'Rwhile';
break;
case 43:return 'Rfor';
break;
case 44:return 'Rdo';
break;
case 45:return 'Rbreak';
break;
case 46:return 'Rcontinue';
break;
case 47:return 'Rreturn';
break;
case 48:return 12;
break;
case 49:return 35;
break;
case 50:return 57;
break;
case 51:return 58;
break;
case 52:return 23;
break;
case 53:return 'Rnew';
break;
case 54:return 'Radd';
break;
case 55:return 'RtoLower';
break;
case 56:return 'RtoUpper';
break;
case 57:return 'Rlength';
break;
case 58:return 'Rtruncate';
break;
case 59:return 'Rround';
break;
case 60:return 'Rtypeof';
break;
case 61:return 'RtoString';
break;
case 62:return 'RtoCharArray';
break;
case 63:return 13;
break;
case 64: /* yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); */ return 59; 
break;
case 65: /* yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); */ return 60; 
break;
case 66:return 55;
break;
case 67:return 56;
break;
case 68:return 5;
break;
case 69: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?::)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\[\[)/i,/^(?:\]\])/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:new\b)/i,/^(?:add\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:["\""][^\"]*["\""])/i,/^(?:["\'"][^\']*["\'"])/i,/^(?:[0-9]+(\.[0-9]+){1}\b)/i,/^(?:[0-9]+\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analyzer;
exports.Parser = analyzer.Parser;
exports.parse = function () { return analyzer.parse.apply(analyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}